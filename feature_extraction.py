import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
from capstone import Cs, CS_ARCH_ARM, CS_MODE_ARM

def extract_features(binary_data):
    features = []

    # Byte Frequency Histogram
    byte_data = np.frombuffer(binary_data, dtype=np.uint8)
    byte_histogram = np.histogram(byte_data, bins=256, range=(0, 256))[0]
    features.extend(byte_histogram)

    # Entropy
    entropy = stats.entropy(byte_data)
    features.append(entropy)

    # Opcodes Frequency Histogram (Requires disassembly)
    opcode_histogram = extract_opcode_histogram(binary_data)
    features.extend(opcode_histogram)

   

    return np.array(features)

def extract_opcode_histogram(binary_data):
    # Disassemble binary data to extract opcode frequencies
    opcode_counts = np.zeros(256)  # Assuming 256 possible opcodes
    try:
        md = Cs(CS_ARCH_ARM, CS_MODE_ARM)
        for inst in md.disasm(binary_data, 0x1000):
            opcode_counts[inst.id] += 1
    except Exception as e:
        print(f"Disassembly error: {e}")
    
    return opcode_counts

def extract_features_from_file(filepath):
    with open(filepath, 'rb') as f:
        binary_data = f.read()
    return extract_features(binary_data)

def visualize_features(features, output_path):
    plt.figure(figsize=(15, 10))

    # Byte Histogram
    plt.subplot(2, 2, 1)
    plt.bar(range(256), features[:256], color='blue', alpha=0.7)
    plt.title('Byte Frequency Histogram')

    # Entropy
    plt.subplot(2, 2, 2)
    plt.bar(0, features[256], color='green', alpha=0.7)
    plt.title('Entropy')
    plt.xticks([])

    # Opcode Histogram
    plt.subplot(2, 2, 3)
    plt.bar(range(256), features[257:513], color='red', alpha=0.7)
    plt.title('Opcode Frequency Histogram')

    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()

    print(f"Feature visualization saved to {output_path}")
